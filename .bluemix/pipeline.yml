---
stages:
- name: SelfAssembly
  inputs:
  - type: git
    branch: master
  triggers:
  - type: commit
  jobs:
  - name: WrapPresent
    type: builder
    artifact_dir: ./
    build_type: shell
    script: |-
      #!/bin/bash
      # Derived from dW article @ https://developer.ibm.com/bluemix/2014/07/03/getting-started-piwik-ibm-bluemix/
      ##########
      # Colors##
      ##########
      Green='\e[0;32m'
      Red='\e[0;31m'
      Yellow='\e[0;33m'
      Cyan='\e[0;36m'
      no_color='\e[0m' # No Color
      #############
      echo ""
      echo -e "${Cyan}Let's setup Piwik for initial deployment${no_color}"
      echo -e "  ${Yellow}Updating apt-get ...${no_color}"
      sudo apt-get update > /dev/null 2>&1
      # Install jq
      echo -e "  ${Yellow}Installing jq for JSON parsing support...${no_color}"
      sudo apt-get --assume-yes install jq > /dev/null 2>&1
      echo -e "  ${Yellow}Installing zip/unzip...${no_color}"
      sudo apt-get --assume-yes install zip unzip > /dev/null 2>&1
      
      # Let's pull the open source code for Twilio-php SDK
      echo -e "  ${Yellow}Updating git submodules ...${no_color}"
      git submodule update --init --recursive > /dev/null 2>&1
      
      echo -e "  ${Yellow}Fetching Piwik 2.15.0 Zip ...${no_color}"
      mkdir htdocs
      wget https://builds.piwik.org/piwik-2.15.0.zip -nv -O ./bluezone/piwik.zip
      echo -e "  ${Yellow}Extracting Piwik${no_color}"
      unzip -o ./bluezone/piwik.zip -d ./htdocs > /dev/null 2>&1
      
      echo -e "  ${Yellow}Fetching GeoLiteCity Data Zip ...${no_color}"
      wget http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz -nv -O ./bluezone/GeoLiteCity.dat.gz
      gzip -dc < ./bluezone/GeoLiteCity.dat.gz > ./htdocs/piwik/misc/GeoLiteCity.dat > /dev/null 2>&1
      
      echo -e "  ${Yellow}Setting up some extra marketplace Piwik plugins ...${no_color}"
      echo -e "    ${Cyan}Installing SecurityInfo ...${no_color}"
      wget https://plugins.piwik.org/api/1.0/plugins/SecurityInfo/download/1.0.5 -nv -O ./bluezone/SecurityInfo.zip
      unzip -o ./bluezone/SecurityInfo.zip -d ./htdocs/piwik/plugins > /dev/null 2>&1
      
      echo -e "    ${Cyan}Installing LDAP Login ...${no_color}"
      wget https://plugins.piwik.org/api/1.0/plugins/LoginLdap/download/3.2.1 -nv -O ./bluezone/LoginLdap.zip
      unzip -o ./bluezone/LoginLdap.zip -d ./htdocs/piwik/plugins > /dev/null 2>&1

      echo -e "    ${Cyan}Installing CustomAlerts ...${no_color}"
      wget https://plugins.piwik.org/api/1.0/plugins/CustomAlerts/download/0.1.21 -nv -O ./bluezone/CustomAlerts.zip
      unzip -o ./bluezone/CustomAlerts.zip -d ./htdocs/piwik/plugins > /dev/null 2>&1
      
      echo -e "    ${Cyan}Installing CustomOptOut ...${no_color}"
      wget https://plugins.piwik.org/api/1.0/plugins/CustomOptOut/download/0.4.0 -nv -O ./bluezone/CustomOptOut.zip
      unzip -o ./bluezone/CustomOptOut.zip -d ./htdocs/piwik/plugins > /dev/null 2>&1
      
      echo -e "    ${Cyan}Installing SimpleSysMon ...${no_color}"
      wget https://plugins.piwik.org/api/1.0/plugins/SimpleSysMon/download/0.3.1 -nv -O ./bluezone/SimpleSysMon.zip
      unzip -o ./bluezone/SimpleSysMon.zip -d ./htdocs/piwik/plugins > /dev/null 2>&1
      
      echo -e "    ${Cyan}Installing FlagCounter ...${no_color}"
      wget https://plugins.piwik.org/api/1.0/plugins/FlagCounter/download/0.4.0 -nv -O ./bluezone/FlagCounter.zip
      unzip -o ./bluezone/FlagCounter.zip -d ./htdocs/piwik/plugins > /dev/null 2>&1
      
      echo -e "    ${Cyan}Installing PerformanceInfo ...${no_color}"
      wget https://plugins.piwik.org/api/1.0/plugins/PerformanceInfo/download/v0.2.2 -nv -O ./bluezone/PerformanceInfo.zip
      unzip -o ./bluezone/PerformanceInfo.zip -d ./htdocs/piwik/plugins > /dev/null 2>&1
      
      echo -e "    ${Cyan}Installing PlatformsReport ...${no_color}"
      wget https://plugins.piwik.org/api/1.0/plugins/PlatformsReport/download/1.0.3 -nv -O ./bluezone/PlatformsReport.zip
      unzip -o ./bluezone/PlatformsReport.zip -d ./htdocs/piwik/plugins > /dev/null 2>&1
      
      echo -e "    ${Cyan}Installing SimplePageBuilder ...${no_color}"
      wget https://plugins.piwik.org/api/1.0/plugins/SimplePageBuilder/download/1.1.0 -nv -O ./bluezone/SimplePageBuilder.zip
      unzip -o ./bluezone/SimplePageBuilder.zip -d ./htdocs/piwik/plugins > /dev/null 2>&1
      
      echo -e "    ${Cyan}Setting up user provided plugins ...${no_color}"
      for f in ./bluezone/configtweaks/plugins; do
          if [ -d ${f} ]; then
              # Will not run if no directories are available
              echo -e "    ${Cyan}Installing ${f} User-Provided Plugin ...${no_color}"
              mv $f ./htdocs/piwik/plugins
          else
              echo -e "    ${Cyan}NO User-Provided Plugins detected...${no_color}"
          fi
      done
      
      echo -e "  ${Yellow}Setting up some extra marketplace Piwik themes ...${no_color}"
      echo -e "    ${Cyan}Installing the Darkness Theme ...${no_color}"
      wget https://themes.piwik.org/api/1.0/plugins/Darkness/download/0.1.4 -nv -O ./bluezone/Darkness.zip
      unzip -o ./bluezone/Darkness.zip -d ./htdocs/piwik/plugins > /dev/null 2>&1
      
      # Deactivated because of 404 failure
      # echo -e "    ${Cyan}Installing the Proteus_Bold Theme ...${no_color}"
      # wget https://themes.piwik.org/api/1.0/plugins/Proteus_Bold/download/0.1.4 -nv -O ./bluezone/ProteusBold.zip
      # unzip -o ./bluezone/ProteusBold.zip -d ./htdocs/piwik/plugins > /dev/null 2>&1
      
      echo -e "  ${Yellow}Setting up unicode font support ...${no_color}"
      echo -e "    ${Cyan}Installing the unifont.ttf ...${no_color}"
      wget http://piwik.org/wp-content/uploads/unifont.ttf.zip -nv -O ./bluezone/unifont.ttf.zip
      unzip -o ./bluezone/unifont.ttf.zip -d ./htdocs/piwik/plugins/ImageGraph/fonts > /dev/null 2>&1
      
      # Organize the artifact structure to be composer friendly
      echo -e "  ${Yellow}Making artifacts composer install friendly ...${no_color}"
      mv ./htdocs/piwik/composer.json .
      mv ./htdocs/piwik/composer.lock .
      echo -e "  ${Yellow}Patching composer.json paths ...${no_color}"
      jq '.autoload["psr-4"]["Piwik\\\\Plugins\\\\"] = "htdocs/piwik/plugins"  | .autoload["psr-4"]["Piwik\\\\"] = "htdocs/piwik/core"  | .autoload["psr-0"]["Zend_"] = "htdocs/piwik/libs" | .autoload["psr-0"]["HTML_"] = "htdocs/piwik/libs" | .autoload["psr-0"]["PEAR_"] = "htdocs/piwik/libs" | .autoload["psr-0"]["Archive_"] = "htdocs/piwik/libs"' composer.json > tmp.$$.json 
      rm composer.json
      mv tmp.$$.json composer.json
      
      # Setup Twilio support
      echo -e "  ${Yellow}Setting up Twilio support ...${no_color}"
      mv ./bluezone/twilio-php ./bluezone/twilio-php-master
      mv ./bluezone/twilio-php-master ./htdocs/piwik/libs
      mv ./bluezone/apptweaks/SMSProvider.php ./htdocs/piwik/plugins/MobileMessaging
      mv ./bluezone/apptweaks/Twilio.php ./htdocs/piwik/plugins/MobileMessaging/SMSProvider
      
      # Organize the artifact structure to be CF PHP Buildpack friendly
      echo -e "  ${Yellow}Making artifacts CF PHP friendly ...${no_color}"
      mv ./bluezone/configtweaks/.bp-config .
      
      # Organize the artifact structure to facilitate BMX deploy
      echo -e "  ${Yellow}Making piwik artifacts ${Cyan}Bluemix ${Yellow}friendly ...${no_color}"
      mv ./bluezone/configtweaks/bootstrap.php ./htdocs/piwik
      mv ./bluezone/configtweaks/.user.ini ./htdocs/piwik
      mv ./bluezone/configtweaks/.htaccess ./htdocs/piwik
      mv ./bluezone/apptweaks/FormDatabaseSetup.php ./htdocs/piwik/plugins/Installation
      mv ./bluezone/apptweaks/Controller.php ./htdocs/piwik/plugins/Installation
      mv ./bluezone/apptweaks/FormFirstWebsiteSetup.php ./htdocs/piwik/plugins/Installation
      mv ./bluezone/apptweaks/upgrade.php ./htdocs/piwik/libs/upgradephp
      
      # Embed config file if provided
      if [ -f "./bluezone/configtweaks/config.ini.php" ]
      then
         echo -e "    ${Cyan}Piwik Config file detected ...${no_color}"
         mv ./bluezone/configtweaks/config.ini.php ./htdocs/piwik/config
      fi
      
      # Cleaning up
      echo -e "  ${Yellow}Cleaning up repository...${no_color}"
      rm -rf ./bluezone
      rm -rf .bluemix
      
      # Generate Config Fetcher Script
      IFS='|' read -ra PROJECT_NAME <<< "$IDS_PROJECT_NAME"
      echo -e "  ${Yellow}Generating config helper download script...${no_color}"
      echo -e "#!/bin/bash" > fetchConfig.sh
      echo -e "rm ./bluezone/configtweaks/config.ini.php" >> fetchConfig.sh
      echo -e "cf files${PROJECT_NAME[1]} /app/htdocs/piwik/config/config.ini.php > ./bluezone/configtweaks/config.ini.php" >> fetchConfig.sh 
      echo -e "sed -i -e '1,3d' ./bluezone/configtweaks/config.ini.php" >> fetchConfig.sh
      chmod +x fetchConfig.sh
- name: SameDayDelivery
  inputs:
  - type: job
    stage: SelfAssembly
    job: WrapPresent
  triggers:
  - type: stage
  jobs:
  - name: OpenPresent
    type: deployer
    target:
      url: ${CF_TARGET_URL}
      organization: ${CF_ORGANIZATION}
      space: ${CF_SPACE}
      application: ${CF_APP}
    script: |
      #!/bin/bash
      # http://serverfault.com/questions/7503/how-to-determine-if-a-bash-variable-is-empty#answer-382740
      if [ -z $(cf s|grep piwikredis|cut -d" " -f1-1) ]; then
        echo "  Pre-creating RedisCloud Service named [piwikredis]"
        cf cs rediscloud 30mb piwikredis
      fi
      if [ -z $(cf s|grep piwikdb|cut -d" " -f1-1) ]; then
        echo "  Pre-creating ClearDB MySQL Service named [piwikdb]"
        cf cs cleardb spark piwikdb
      fi
      echo "Sendgrid detection routine ..." > /dev/null 2>&1
      if [ -n $(cf s|grep sendgrid|cut -d" " -f1-1) ] && [ $(cf s|grep sendgrid|cut -d" " -f1-1) != "sendmail" ]; then
        echo "  Detected existing sendgrid service ${existingSendgrid} within target space"
        echo "  Updating manifest.yml file to match target space sendgrid service"
        sed -e "s/sendmail/$(cf s|grep sendgrid|cut -d" " -f1-1)/g" ./manifest.yml > manifest.new
        rm manifest.yml
        mv manifest.new manifest.yml
      else
        echo "  Pre-creating Sendgrid Service named [sendmail]"
        cf cs sendgrid free sendmail
      fi
      cf push "${CF_APP}"
      # view logs
      #cf logs "${CF_APP}" --recent
